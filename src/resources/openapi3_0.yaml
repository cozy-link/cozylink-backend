openapi: 3.0.3
info:
  title: CozyLink Backend - OpenAPI 3.0
  description: |-
    This is a Server for CozyLink App based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    Some useful links:
    - [The CozyLink Backend repository](https://github.com/cozy-link/cozylink-backend)
    - [The source API definition for the CozyLink Backend](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)

  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: renter
    description: Operations about renter
  - name: unit
    description: Operations about renting unit
paths:
  /renter:
    post:
      tags:
        - renter
      summary: Create Renter object
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created Renter object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Renter'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Renter'
  /renter/login:
    get:
      tags:
        - renter
      summary: Logs renter into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /renter/logout:
    get:
      tags:
        - renter
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /renter/{username}:
    get:
      tags:
        - renter
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Renter'
            application/xml:
              schema:
                $ref: '#/components/schemas/Renter'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - renter
      summary: Update renter
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Renter'
          application/xml:
            schema:
              $ref: '#/components/schemas/Renter'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Renter'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - renter
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /unit:
    get:
      tags:
        - unit
      summary: get a list of units
      description: this is the default endpoint to get a list of units
      operationId: getUnits
      responses:
        default:
          description: successful operation
components:
  schemas:
    Unit:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        title:
          type: string
        description:
          type: string
        propertyType:
          type: string
        roomType:
          type: string
        unitDetail:
          items:
            $ref: '#/components/schemas/UnitDetail'
        pricing:
          items:
            $ref: '#/components/schemas/Pricing'
        availability:
          items:
            $ref: '#/components/schemas/Availability'
        owner:
          items:
            $ref: '#/components/schemas/Owner'
        policy:
          items:
            $ref: '#/components/schemas/Policy'
        review:
          items:
            $ref: '#/components/schemas/Review'
        location:
          type: array
          items:
            $ref: '#/components/schemas/Location'
        photo:
          type: array
          items:
            $ref: '#/components/schemas/Photo'
    UnitDetail:
      type: object
      properties:
        bedrooms:
          type: integer
        beds:
          type: integer
        bathrooms:
          type: number
        maxOccupancy:
          type: integer
        amenities:
          type: array
          items:
            type: string
    Pricing:
      type: object
      properties:
        basePrice:
          type: number
        cleaningFee:
          type: number
        extraPersonFee:
          type: number
    Availability:
      type: object
      properties:
        availabilityCalendar:
          type: array
          items:
            type: string
            format: date
      minimumStay:
        type: integer
      maximumStay:
        type: integer
    Owner:
      type: object
      properties:
        hostId:
          type: integer
          format: int64
        hostName:
          type: string
    Policy:
      type: object
      properties:
        cancellationPolicy:
          type: string
        houseRules:
          type: string
    Review:
      type: object
      properties:
        reviewId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        rating:
          type: number
        comment:
          type: string
    Photo:
      type: object
      properties:
        photoId:
          type: integer
          format: int64
        photoUrl:
          type: string
    Location:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
        geolocation:
          $ref: '#/components/schemas/Geolocation'
    Geolocation:
      type: object
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
    Renter:
      type: object
      required:
        - name
        - email
        - password
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
